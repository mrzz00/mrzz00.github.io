<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zlog</title>
    <link>/</link>
    <description>Recent content on Zlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Oct 2020 11:49:35 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CBC之伪造密文</title>
      <link>/post/cbc-cipher/</link>
      <pubDate>Tue, 06 Oct 2020 11:49:35 +0200</pubDate>
      
      <guid>/post/cbc-cipher/</guid>
      <description>&lt;p&gt;在之前的&lt;a href=&#34;https://www.mrzz.cc/post/cbc-padding/&#34;&gt;小文&lt;/a&gt;里面详细介绍了如何利用&lt;code&gt;Oracle&lt;/code&gt;实现对CBC的填充攻击，从而解出来明文内容。此篇小小文将解释如何利用这一对明文密文&lt;code&gt;(m,c)&lt;/code&gt;，在不知道密钥的情况下，构造一个对合法的明文密钥&lt;code&gt;(M,C)&lt;/code&gt;。这样，攻击者便能在通信双方未能察觉之下修改通信内容，以达到自己的目的。跟前文一样，此文还是以二个消息块为例。有了前文的基础，此文直接进入主题。对CBC不了解或者不够熟悉的读者，请先翻阅前文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>线性分析 FEAL4</title>
      <link>/post/feal4/</link>
      <pubDate>Thu, 01 Oct 2020 21:03:03 +0200</pubDate>
      
      <guid>/post/feal4/</guid>
      <description>&lt;p&gt;FEAL4(Fast data Encryption Algorithm)由日本密码学家清水明宏和宫口庄司于1987年在日本电信电话株式会社(NTT)任职期间提出，作为一个针对DES的替代加密方案。相比较DES被设计成硬件电路的思路，FEAL4可由纯软件实现，得益于较少的加密轮数(4轮)，其执行速度相当快。本文首先介绍FEAL4以及DES所使用的Feistel加密结构，根据FEAL4所使用的F函数，分析F输入及输出之间的线性关系。然后解释，如何利用该线性关系配合较少的明文密文对，攻击者可以快速破解密钥。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SOCKS5协议</title>
      <link>/post/socks5/</link>
      <pubDate>Tue, 08 Sep 2020 12:56:50 +0200</pubDate>
      
      <guid>/post/socks5/</guid>
      <description>&lt;p&gt;最近看了一下&lt;a href=&#34;https://tools.ietf.org/html/rfc1928&#34;&gt;&lt;code&gt;SOCKS5&lt;/code&gt;&lt;/a&gt;协议，一个小巧方便的代理协议，这里是一些笔记。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CBC填充攻击</title>
      <link>/post/cbc-padding/</link>
      <pubDate>Sat, 29 Aug 2020 20:53:58 +0200</pubDate>
      
      <guid>/post/cbc-padding/</guid>
      <description>&lt;p&gt;CBC(Cipher Block Chaining)是一种块加密，所谓块，就是一段固定长度的数据。明文，也就是待加密的数据，被分割成若干个块，然后分别加密每一个块。如果最后一个块未被填满，则需要额外的数据填充其中，然后加密。在本文首先介绍CBC加密系统的工作流程，然后就其采用的填充标准&lt;a href=&#34;https://tools.ietf.org/html/rfc2315#section-10.3&#34;&gt;PKCS#7&lt;/a&gt;详细说明一种攻击方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RSA填充攻击</title>
      <link>/post/rsa-padding/</link>
      <pubDate>Sat, 29 Aug 2020 10:09:33 +0200</pubDate>
      
      <guid>/post/rsa-padding/</guid>
      <description>&lt;p&gt;在实际应用的RSA算法里面，消息都必须经过填充以后才会被加密，以拒绝同态攻击。在RFC8017的&lt;a href=&#34;https://tools.ietf.org/html/rfc8017#section-7.2.1&#34;&gt;7.2.1&lt;/a&gt;节，详细介绍了RSA的加密过程。本文稍微简化了加密流程，以求更能直观解释填充攻击的原理。想要了解RSA算法更多细节的同学，请参阅RFC8017文档。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>大数幂运算</title>
      <link>/post/exponential-large-number/</link>
      <pubDate>Tue, 25 Aug 2020 22:25:43 +0200</pubDate>
      
      <guid>/post/exponential-large-number/</guid>
      <description>幂运算(Exponentiation)又称指数运算，写作\(c= m^e \)，即\(c\)等于\(e\)个\(m\)相乘。当\(m\)或者\(e\)的数值不大的时候，可以通过重复的乘法运算来获得\(c\)。当\(m\)和\(e\)都是一个大数的时候，比如说512位长。尽管有了计算机，显然对\(m\)重复\(e\)次乘法运算的效率不高。那么该怎样快速进行大数幂运算呢？</description>
    </item>
    
    <item>
      <title>Polly Cracker破解</title>
      <link>/post/polly-cracker-attack/</link>
      <pubDate>Wed, 05 Aug 2020 13:35:37 +0200</pubDate>
      
      <guid>/post/polly-cracker-attack/</guid>
      <description>在前文介绍了非对称加密系统Polly Cracker，就像naive RSA一样，它也不是一个安全的加密系统。例如，在已知一对明文密文\((m, c)\),攻击者可以构造出来一个新的明文密文对\((m+m&#39;, c+m&#39;)\)，因为\((c + m&#39;)(\sigma) = c(\sigma) + m&#39; = m + m&#39;\)。但本文将要讨论的问题要比这个严重的多：攻击者可以通过构造特殊的密文，直接解出来Polly Cracker的密钥。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>我叫占(zhān)文，现在德国念书，信息安全方向的硕士。对密码学、数据安全和隐私保护感兴趣。正在努力。
下面是一些我的联系方式，希望能认识你。
 GitHub Twitter E-Mail  </description>
    </item>
    
    <item>
      <title>Polly Cracker加密系统</title>
      <link>/post/polly-cracker/</link>
      <pubDate>Wed, 22 Jul 2020 21:24:29 +0200</pubDate>
      
      <guid>/post/polly-cracker/</guid>
      <description>&lt;p&gt;现代加密系统的安全性建立在计算数学难题之上，比如RSA基于质因数分解，DH基于DLog计算。本文介绍的加密系统Polly Cracker则是基于组合多项式求解。为了更好地理解Polly Cracker的原理，首先来熟悉一下需要用到的数学知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vigenere密码破解</title>
      <link>/post/vigenere-attack/</link>
      <pubDate>Tue, 21 Jul 2020 11:23:56 +0200</pubDate>
      
      <guid>/post/vigenere-attack/</guid>
      <description>&lt;p&gt;在介绍Vigenere密码之前，先介绍一个更为简单的密码系统：凯撒密码(Caeser Cipher)。据称，当年凯撒曾用这种方法和手下的将领进行通信，传达指挥命令。凯撒密码是一种替换加密技术，即明文中所有字母都在字母表上向后或者向前偏移一个固定的距离，被替换成密文。当这个距离是3的时候，即称作凯撒密码。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>